     1                                  ; VU COAL CH # 4 Q: 5
     2                                  
     3                                  [org 0x0100]
     4                                  
     5 00000000 E91400                      jmp start
     6                                  
     7                                  
     8 00000003 ECFAFFFF00000000            multiplicand:		dd -00001300,00000000
     9 0000000B F4010000                    multiplier:			dd 00000500
    10 0000000F 0000000000000000            result:				dd 00000000, 00000000
    11                                  
    12                                      ; Check for signed numbers
    13                                  
    14                                      start:
    15 00000017 BE0000                          mov si, 0
    16                                  
    17 0000001A 803E[0600]00                    cmp byte [multiplicand + 3], 0          ; Compare the Most Significant Byte with 0, because it will tell 
    18                                  													 ; you whether the number is positive or negative
    19 0000001F 7D15                            jge l1
    20                                  
    21                                          ; If multiplicand is negative then take 2's complement of the Multiplicand
    22                                  
    23 00000021 F716[0300]                          not word [multiplicand]
    24 00000025 F716[0500]                          not word [multiplicand + 2]
    25 00000029 8106[0300]0100                      add word [multiplicand], 1
    26 0000002F 8116[0500]0000                      adc word [multiplicand + 2], 0
    27 00000035 46                                  inc si
    28                                  
    29                                      l1:
    30 00000036 803E[0E00]00                    cmp byte [multiplier + 3], 0            ; Compare the Most Significant Byte with 0, because it will tell 
    31                                  													 ; you whether the number is positive or negative
    32 0000003B 7D15                            jge l2
    33                                  
    34                                          ; If multiplicand is negative then take 2's complement of the Multiplier
    35                                  
    36 0000003D F716[0B00]                          not word [multiplier]
    37 00000041 F716[0D00]                          not word [multiplier + 2]
    38 00000045 8106[0B00]0100                      add word [multiplier], 1
    39 0000004B 8116[0D00]0000                      adc word [multiplier + 2], 0
    40 00000051 46                                  inc si
    41                                  
    42                                      l2:
    43 00000052 8B16[0B00]                      mov dx, [multiplier]                    ; LSW (Least Significant Word) of mulitplier
    44                                  
    45 00000056 B120                            mov cl, 32
    46 00000058 BB0100                          mov bx, 1
    47                                  
    48                                      checkbit:
    49 0000005B 85DA                            test dx, bx
    50 0000005D 741C                            jz skip
    51                                  
    52 0000005F A1[0300]                            mov ax, [multiplicand]
    53 00000062 0106[0F00]                          add [result], ax       
    54 00000066 A1[0500]                            mov ax, [multiplicand + 2]
    55 00000069 1106[1100]                          adc [result + 2], ax       
    56 0000006D A1[0700]                            mov ax, [multiplicand + 4]
    57 00000070 1106[1300]                          adc [result + 4], ax       
    58 00000074 A1[0900]                            mov ax, [multiplicand + 6]
    59 00000077 1106[1500]                          adc [result + 6], ax       
    60                                  
    61                                      skip:
    62 0000007B D126[0300]                      shl word [multiplicand], 1
    63 0000007F D116[0500]                      rcl word [multiplicand + 2], 1
    64 00000083 D116[0700]                      rcl word [multiplicand + 4], 1
    65 00000087 D116[0900]                      rcl word [multiplicand + 6], 1
    66                                  
    67 0000008B D1E3                            shl bx, 1
    68 0000008D FEC9                            dec cl
    69                                  
    70 0000008F 80F910                          cmp cl, 16
    71 00000092 7407                            jz update
    72                                  
    73 00000094 80F900                          cmp cl, 0
    74 00000097 740B                            jz end
    75 00000099 75C0                            jnz checkbit 
    76                                          
    77                                      update:
    78 0000009B BB0100                          mov bx, 1
    79 0000009E 8B16[0D00]                      mov dx, [multiplier + 2]                ; MSW (Most Significant Word) of mulitplier	
    80 000000A2 EBB7                            jmp checkbit
    81                                  
    82                                      end:
    83 000000A4 81FE0100                        cmp si, 1
    84 000000A8 7516                            jnz _end
    85                                  
    86                                          ;2's complement of the result
    87                                  					
    88 000000AA F716[0F00]              			not word [result]
    89 000000AE F716[1100]              			not word [result + 2]
    90 000000B2 F716[1300]              			not word [result + 4]
    91 000000B6 F716[1500]              			not word [result + 6]
    92 000000BA 8106[0F00]0100          			add word [result], 1
    93                                      
    94                                      _end:
    95 000000C0 B8004C                          mov ax, 4c00h
    96 000000C3 CD21                            int 21h
